[{"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/index.js":"1","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/reportWebVitals.js":"2","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/App.js":"3","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/contexts/AuthContext.js":"4","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/services/TaskbleService.js":"5","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/Login.js":"6","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/AuthenticatedRoute.js":"7","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/Home.js":"8","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/helpers/authHelper.js":"9","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/UI/LogoSprite.js":"10","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/UI/Input.js":"11","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/hooks/useInput.js":"12","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/NotAuthenticatedRoute.js":"13","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/Calendar.js":"14","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/TaskForm.js":"15","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/hooks/useModal.js":"16","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/contexts/TranslateContext.js":"17","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/SignUpForm.js":"18","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/SignUpValidation.js":"19","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/UpdatePasswordForm.js":"20","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/UpdatePasswordRequest.js":"21","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/SignUpLink.js":"22","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/LoginLink.js":"23","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/UpdatePasswordRequestLink.js":"24","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/assets/texts.js":"25","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/helpers/translateHelper.js":"26","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/Day.js":"27","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/helpers/tasksHelper.js":"28","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/Week.js":"29","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/TaskDisc.js":"30","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/TaskModal.js":"31","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/contexts/CalendarContext.js":"32","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/UI/OptionButton.js":"33"},{"size":1009,"mtime":1623171432592,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":1612216164924,"results":"36","hashOfConfig":"35"},{"size":1264,"mtime":1622542048332,"results":"37","hashOfConfig":"35"},{"size":976,"mtime":1623181356025,"results":"38","hashOfConfig":"35"},{"size":1623,"mtime":1624982485118,"results":"39","hashOfConfig":"35"},{"size":2040,"mtime":1624282787052,"results":"40","hashOfConfig":"35"},{"size":373,"mtime":1615492295432,"results":"41","hashOfConfig":"35"},{"size":1749,"mtime":1624281777162,"results":"42","hashOfConfig":"35"},{"size":787,"mtime":1614461402846,"results":"43","hashOfConfig":"35"},{"size":1469,"mtime":1624282709923,"results":"44","hashOfConfig":"35"},{"size":387,"mtime":1622196925890,"results":"45","hashOfConfig":"35"},{"size":986,"mtime":1624476351428,"results":"46","hashOfConfig":"35"},{"size":373,"mtime":1615492311652,"results":"47","hashOfConfig":"35"},{"size":1260,"mtime":1625073644767,"results":"48","hashOfConfig":"35"},{"size":4939,"mtime":1624481983423,"results":"49","hashOfConfig":"35"},{"size":265,"mtime":1615848767691,"results":"50","hashOfConfig":"35"},{"size":1501,"mtime":1617287944682,"results":"51","hashOfConfig":"35"},{"size":4549,"mtime":1618436341415,"results":"52","hashOfConfig":"35"},{"size":483,"mtime":1616877288925,"results":"53","hashOfConfig":"35"},{"size":2753,"mtime":1617215873669,"results":"54","hashOfConfig":"35"},{"size":2325,"mtime":1617053448601,"results":"55","hashOfConfig":"35"},{"size":423,"mtime":1616877726178,"results":"56","hashOfConfig":"35"},{"size":402,"mtime":1616877874097,"results":"57","hashOfConfig":"35"},{"size":428,"mtime":1616878458047,"results":"58","hashOfConfig":"35"},{"size":6152,"mtime":1625073470886,"results":"59","hashOfConfig":"35"},{"size":350,"mtime":1617287627609,"results":"60","hashOfConfig":"35"},{"size":730,"mtime":1624634705817,"results":"61","hashOfConfig":"35"},{"size":611,"mtime":1624014305146,"results":"62","hashOfConfig":"35"},{"size":701,"mtime":1623092961568,"results":"63","hashOfConfig":"35"},{"size":2273,"mtime":1624482723142,"results":"64","hashOfConfig":"35"},{"size":5529,"mtime":1624907113993,"results":"65","hashOfConfig":"35"},{"size":1852,"mtime":1623180814467,"results":"66","hashOfConfig":"35"},{"size":1433,"mtime":1624476464748,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"176cd53",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"70"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/index.js",[],["139","140"],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/reportWebVitals.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/App.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/contexts/AuthContext.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/services/TaskbleService.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/Login.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/AuthenticatedRoute.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/Home.js",["141"],"import React, { useContext, useEffect, useState } from 'react'\n\nimport ReactCSSTransitionGroup from 'react-transition-group'\n\nimport TranslateContext from '../../contexts/TranslateContext'\nimport AuthContext from '../../contexts/AuthContext'\nimport CalendarContext from '../../contexts/CalendarContext'\nimport TaskbleService from '../../services/TaskbleService'\n\nimport Calendar from '../tasks/Calendar'\nimport TaskModal from '../tasks/TaskModal'\n\nimport { Button } from 'react-bootstrap'\n\nconst Home = () => {\n  const auth = useContext(AuthContext)\n  const { texts } = useContext(TranslateContext)\n  const { removeCurrentFirstDayOfTheWeek } = useContext(CalendarContext)\n\n  const [show, setShow] = useState(false)\n\n   useEffect(() => {\n    TaskbleService.userProfile()\n  }, [auth.currentUser]) \n\n  const handleRequestNewPassword = () => {\n    TaskbleService.requestNewPassword()\n      .then(() => {\n        //////////////////////////////////////////////// => ADD ALERT !!!!!\n      })\n      .catch(() => {\n        //////////////////////////////////////////////// => ADD ALERT !!!!!\n      })\n  }\n\n  const handleNewTask = () => {\n    setShow(true)\n  }\n\n  const handleLogout = () => {\n    auth.logout()\n    removeCurrentFirstDayOfTheWeek()\n  }\n\n  return (\n    <div>\n      <Button onClick={handleRequestNewPassword} variant=\"primary\">\n        { texts.buttons.changePassword }\n      </Button>\n\n      <Button onClick={handleNewTask} variant=\"primary\">\n        { texts.headers.newTask }\n      </Button>\n\n      <Button onClick={handleLogout} variant=\"primary\">\n        ←\n      </Button>\n\n      <Calendar/>\n\n      {show && (\n        <TaskModal taskId={''} typeModal={'create'} show={show} setShow={setShow} />\n      )}\n    </div>\n  )\n}\n\nexport default Home","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/helpers/authHelper.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/UI/LogoSprite.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/UI/Input.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/hooks/useInput.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/NotAuthenticatedRoute.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/Calendar.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/TaskForm.js",["142"],"import React, { useContext, useEffect } from 'react'\n\nimport TranslateContext from '../../contexts/TranslateContext'\nimport TaskbleService from '../../services/TaskbleService'\n\nimport useInput from '../../hooks/useInput'\n\nimport Input from '../UI/Input'\n\nimport { dateToDateInputFormat } from '../../helpers/tasksHelper'\n\nconst validators = {\n  keyword: val => val && val.length <= 10,\n  title: val => val,\n  userPriority: val => 1 <= val && val <= 5,\n  toDoDate: val => val,\n  limitDate: val => val\n}\n\nconst TaskForm = ({ task, stateForm, setFormErrors, cancel, close }) => {\n  const { texts } = useContext(TranslateContext)\n\n  const {\n    value: keyword,\n    touch: keywordTouch,\n    error: keywordError,\n    handleInput: keywordHandleInput\n  } = useInput(task ? task.keyword : '', validators.keyword, texts.errors.keywordRequired, stateForm)\n\n  const {\n    value: title,\n    touch: titleTouch,\n    error: titleError,\n    handleInput: titleHandleInput\n  } = useInput(task ? task.title : '', validators.title, texts.errors.titleRequired, stateForm)\n\n  const {\n    value: description,\n    handleInput: descriptionHandleInput\n  } = useInput(task ? task.description : '')\n\n  const {\n    value: userPriority,\n    touch: userPriorityTouch,\n    error: userPriorityError,\n    handleInput: userPriorityHandleInput\n  } = useInput(task ? task.userPriority : '', validators.userPriority, texts.errors.priorityRequired, stateForm)\n\n  const {\n    value: toDoDate,\n    touch: toDoDateTouch,\n    error: toDoDateError,\n    handleInput: toDoDateHandleInput\n  } = useInput(task ? dateToDateInputFormat(task.date.toDo) : '', validators.toDoDate, texts.errors.toDoDateRequired, stateForm)\n\n  const {\n    value: limitDate,\n    touch: limitDateTouch,\n    error: limitDateError,\n    handleInput: limitDateHandleInput\n  } = useInput(task ? dateToDateInputFormat(task.date.limit) : '', validators.limitDate, texts.errors.limitDateRequired, stateForm)\n\n  const anyError = () => {\n    const errors = [keywordError.active, titleError.active, userPriorityError.active, toDoDateError.active, limitDateError.active]\n    return errors.some(x => x === true)\n  }\n\n  useEffect(() => {\n    setFormErrors(anyError)\n  }, [anyError])\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n\n    const date = {toDo: toDoDate, limit: limitDate}\n    const taskData = { keyword, title, description, userPriority, date}\n\n    if (stateForm === 'create') {\n      TaskbleService.createTask(taskData)\n      .then(() => {\n        close()\n      })\n      /*.catch(error => {\n        console.log(error.response.data.errors)\n      })*/\n    } else if (stateForm === 'edit') {\n      TaskbleService.updateTask(task.id, taskData)\n      .then(() => {\n        cancel()\n      })\n      /*.catch(error => {\n        console.log(error.response.data.errors)\n      })*/\n    }\n  }\n\n  return (\n    <div>\n      <form id='taskForm' onSubmit={handleSubmit} >\n        <Input type='text' name='keyword' placeholder={texts.inputs.keyword} disabled={stateForm === 'view' ? true : false} {...keywordHandleInput} />\n        {keywordTouch && keywordError.active && (\n          <div>\n            { keywordError.message }\n          </div>\n        )}\n\n        <Input type='text' name='title' placeholder={texts.inputs.title} disabled={stateForm === 'view' ? true : false} {...titleHandleInput} />\n        {titleTouch && titleError.active && (\n          <div>\n            { titleError.message }\n          </div>\n        )}\n\n        <Input type='text' name='description' placeholder={texts.inputs.description} disabled={stateForm === 'view' ? true : false} {...descriptionHandleInput} />\n\n        <div>\n          <label>{texts.labels.priority}:</label>\n          <select type='select' name='userPriority' disabled={stateForm === 'view' ? true : false} {...userPriorityHandleInput} >\n            <option>-</option>\n            <option>1</option>\n            <option>2</option>\n            <option>3</option>\n            <option>4</option>\n            <option>5</option>\n          </select>\n          {userPriorityTouch && userPriorityError.active && (\n            <div>\n              { userPriorityError.message }\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label>{ texts.labels.dateToDo }:</label>\n          <Input type='date' name='toDoDate' disabled={stateForm === 'view' ? true : false} {...toDoDateHandleInput} />\n          {toDoDateTouch && toDoDateError.active && (\n            <div>\n              { toDoDateError.message }\n            </div>\n          )}\n        </div>\n\n        <div>\n          <label>{ texts.labels.limitDate }:</label>\n          <Input type='date' name='limitDate' disabled={stateForm === 'view' ? true : false} {...limitDateHandleInput} />\n          {limitDateTouch && limitDateError.active && (\n            <div>\n              { limitDateError.message }\n            </div>\n          )}\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default TaskForm","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/hooks/useModal.js",[],["143","144"],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/contexts/TranslateContext.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/SignUpForm.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/SignUpValidation.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/UpdatePasswordForm.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/UpdatePasswordRequest.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/SignUpLink.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/auth/LoginLink.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/users/UpdatePasswordRequestLink.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/assets/texts.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/helpers/translateHelper.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/Day.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/helpers/tasksHelper.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/Week.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/TaskDisc.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/tasks/TaskModal.js",["145"],"import React, { useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport TranslateContext from '../../contexts/TranslateContext'\nimport TaskbleService from '../../services/TaskbleService'\n\nimport TaskForm from './TaskForm'\nimport OptionButton from '../UI/OptionButton'\n\nimport { Modal, Button } from 'react-bootstrap'\n\nimport '../../stylesheets/tasks/TaskModal.css'\n\nconst TaskModal = ({ task, setTask, typeModal, show, setShow }) => {\n  const history = useHistory()\n  const { texts } = useContext(TranslateContext)\n\n  const [stateForm, setStateForm] = useState(typeModal)\n  const [request, setRequest] = useState(null)\n  const [formErrors, setFormErrors] = useState(false)\n\n  const handleClose = () => {\n    setShow(false)\n    history.go()\n  }\n\n  const handleOnHide = () => {\n    switch (stateForm) {\n      case 'create':\n        setRequest('cancelCreate')\n        break\n      case 'view':\n        handleClose()\n        break\n      case 'edit':\n        setRequest('save')\n        break\n    }\n  }\n\n  const handleContinueCreate = () => {\n    setRequest(null)\n  }\n\n  const handleCancelCreate = () => {\n    handleClose()\n  }\n\n  const handleEdit = () =>  {\n    setStateForm('edit')\n  }\n\n  const handleCancelEdit = () =>  {\n    setStateForm('view')\n    setRequest(null)\n  }\n\n  const handleSaveRequest = () => {\n    setStateForm('edit')\n    setRequest('save')\n  }\n\n  const handleDone = () => {\n    TaskbleService.doneTask(task.id)\n      .then(updatedTask => setTask(updatedTask))//////////////////////////////////////////////// => ADD ALERT !!!!!\n      .catch(() => {\n        //////////////////////////////////////////////// => ADD ALERT !!!!!\n      })\n  }\n\n  const handleDeleteRequest = () => {\n    setStateForm('delete')\n    setRequest('delete')\n  }\n\n  const handleDelete = () => {\n    TaskbleService.deleteTask(task.id)\n      .then(() => {\n        //////////////////////////////////////////////// => ADD ALERT !!!!!\n        setRequest(null)\n        handleClose()\n      })\n      .catch(() => {\n        //////////////////////////////////////////////// => ADD ALERT !!!!!\n      })\n  }\n  \n  const handleCancelDelete = () => {\n    setStateForm('view')\n    setRequest(null)\n  }\n\n  return (\n    <div>\n      {((stateForm === 'create') || (stateForm !== 'create')) && show && (\n        <Modal show={show} onHide={handleOnHide}>\n          <Modal.Header id='modalHeader'>\n            {stateForm === 'view' && (\n              <div id='option-button-container'>\n                <OptionButton option={'edit'} onClick={handleEdit} stateForm={stateForm}/>\n                <OptionButton option={'delete'} onClick={handleDeleteRequest} stateForm={stateForm}/>\n                <OptionButton option={'close'} onClick={handleClose} stateForm={stateForm}/>\n              </div>\n            )}\n          </Modal.Header>\n\n          <Modal.Body>\n            <TaskForm task={task ? task : null} stateForm={stateForm} setFormErrors={setFormErrors} cancel={handleCancelEdit} close={handleClose}/>\n\n            {task && (\n              <Button variant={task.done ? 'success' : 'warning'} onClick={handleDone}>\n                {task.done ? texts.buttons.done : texts.buttons.pending}\n              </Button>\n            )}\n          </Modal.Body>\n\n          {(stateForm === 'create' || stateForm === 'edit' || request) && (\n            <Modal.Footer>\n              {stateForm === 'create' && request === null && (\n                <Button disabled={formErrors} type='submit' form='taskForm' variant=\"primary\">\n                  { texts.buttons.createTask }\n                </Button>\n              )}\n\n              {stateForm === 'edit' && request === null && (\n                <div>\n                  <Button disabled={formErrors} variant=\"primary\" onClick={handleSaveRequest}>\n                    { texts.buttons.save }\n                  </Button>\n\n                  <Button variant=\"secondary\" onClick={handleCancelEdit}>\n                    {texts.buttons.cancel}\n                  </Button>\n                </div>\n              )}\n\n              \n              {request === 'cancelCreate' && (\n                <div>\n                  <h4>{texts.headers.cancelCreateTask}</h4>\n\n                  <Button variant=\"primary\" onClick={handleContinueCreate}>\n                    {texts.buttons.continue}\n                  </Button>\n\n                  <Button variant=\"secondary\" onClick={handleCancelCreate}>\n                    {texts.buttons.cancel}\n                  </Button>\n                </div>\n              )}\n\n              {request === 'save' && (\n                <div>\n                  <h4>{texts.headers.confirmSaveTask}</h4>\n\n                  <Button variant=\"primary\" type='submit' form='taskForm'>\n                    {texts.buttons.save}\n                  </Button>\n\n                  <Button variant=\"secondary\" onClick={handleCancelEdit}>\n                    {texts.buttons.cancel}\n                  </Button>\n                </div>\n              )}\n\n              {request === 'delete' && (\n                <div>\n                  <h4>{texts.headers.confirmDeleteTask}</h4>\n\n                  <Button variant=\"danger\" onClick={handleDelete}>\n                    {texts.buttons.delete}\n                  </Button>\n\n                  <Button variant=\"primary\" onClick={handleCancelDelete}>\n                    {texts.buttons.cancel}\n                  </Button>\n                </div>\n              )}\n            </Modal.Footer>\n          )}\n        </Modal>\n      )}\n   </div> \n  )\n}\n\nexport default TaskModal","/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/contexts/CalendarContext.js",[],"/mnt/d/WEB DEVELOPMENT/TASKBLE/taskble-web/src/components/UI/OptionButton.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":3,"column":8,"nodeType":"152","messageId":"153","endLine":3,"endColumn":31},{"ruleId":"154","severity":1,"message":"155","line":70,"column":6,"nodeType":"156","endLine":70,"endColumn":16,"suggestions":"157"},{"ruleId":"146","replacedBy":"158"},{"ruleId":"148","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":28,"column":5,"nodeType":"162","messageId":"163","endLine":38,"endColumn":6},"no-native-reassign",["164"],"no-negated-in-lhs",["165"],"no-unused-vars","'ReactCSSTransitionGroup' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setFormErrors'. Either include it or remove the dependency array. If 'setFormErrors' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["166"],["164"],["165"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},"Update the dependencies array to be: [anyError, setFormErrors]",{"range":"169","text":"170"},[2184,2194],"[anyError, setFormErrors]"]